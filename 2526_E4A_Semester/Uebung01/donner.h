// ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
// ‚ö†Ô∏è  DO NOT EDIT THIS FILE!                                          ‚ö†Ô∏è
// ‚ö†Ô∏èThis is a local copy of `include/donner.h`.                       ‚ö†Ô∏è
// ‚ö†Ô∏èTo modify the shared helper functions, edit the master version    ‚ö†Ô∏è
// ‚ö†Ô∏èin `<Project_root>/include/donner.h` and copy it here afterwards. ‚ö†Ô∏è
// ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

#ifndef DONNER_H
#define DONNER_H

/**
 * @file donner.h
 * @brief Utility functions for Arduino classroom projects.
 *
 * This header provides helper functions that support teaching and
 * debugging on Arduino systems. All code is written in portable C++11.
 *
 * Functions included:
 *   - printBin(): Prints binary representation with underscores every 4 bits.
 *   - printHex(): Prints hexadecimal representation with 0x_ prefix.
 *
 * The functions rely on the global Serial object for output and use
 * the F() macro to store constant strings in flash memory (saves RAM).
 */

#include <Arduino.h>   // Required for Serial, F(), and fixed-width types

// -------------------------------------------------------------
// üß© Helper: print binary representation with underscore grouping
// -------------------------------------------------------------
template<typename T>
void printBin(T value) {
    const uint8_t bitCount = sizeof(T) * 8;
    Serial.print(F("0b_"));

    for (int i = bitCount - 1; i >= 0; --i) {
        Serial.print((value & (static_cast<T>(1) << i)) ? '1' : '0');
        if (i % 4 == 0 && i != 0) Serial.print('_');  // group every 4 bits
    }
    Serial.println();
}

// -------------------------------------------------------------
// üß© Helper: print hexadecimal representation with prefix
// -------------------------------------------------------------
template<typename T>
void printHex(T value) {
    const uint8_t nibbleCount = sizeof(T) * 2;
    Serial.print(F("0x_"));

    for (int nibble = (nibbleCount - 1) * 4; nibble >= 0; nibble -= 4) {
        uint8_t digit = (value >> nibble) & 0xF;
        char c = (digit < 10) ? ('0' + digit) : ('a' + (digit - 10));
        Serial.print(c);
    }
    Serial.println();
}

#endif // DONNER_H
